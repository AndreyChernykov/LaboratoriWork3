/*
Описать иерархию классов для приложения Оружие
Иерархия должна включать в себя минимум один базовый абстрактный класс и два наследника.+
Все свойства классов обязаны иметь модификаторы видимости private и соответствующие им методы-мутаторы.+
В базовом классе должно быть поле типа enum+
Описать конструкторы (по умолчанию и со всеми параметрами), переопределить методы toString, equals.
Создать класс-фабрику для создания объектов иерархии.

*/
public class Main {
	public static void main (String []args) {
		String str = " amound in the arsenal.";
		
		System.out.println("MY WEAPONS");
		
		Weapons myKnife = new Knife();
		Knife kn = new Knife();
		kn.setKnife("Tactical knife.");
		System.out.print(kn.getKnife());
		kn.setLengthKnife(25);
		System.out.print(" Length knife " + kn.getLengthKnife() + "cm. ");
		myKnife.setAmount(5);
		System.out.println(myKnife.getAmount() + str);
		
		Weapons myRifle = new Rifle();
		Rifle rf = new Rifle();
		rf.setRifle("Sports gun.");
		System.out.print(rf.getRifle());
		rf.setNumbOfRound(1);
		System.out.print(" Bullet charging " + rf.getNumbOfRound() + " in rifle. ");
		myRifle.setAmount(3);
		System.out.println(myRifle.getAmount() + str);
		
		Weapons myBow = new Bow();
		Bow bw = new Bow();
		bw.setBow("Olimpic bow.");
		System.out.print(bw.getBow());
		bw.setPullForse(18);
		System.out.print(" Pull forse bow " + bw.getPullForse() + " pounds. ");
		myBow.setAmount(2);
		System.out.println(myBow.getAmount() + str);
	}
}

abstract class Weapons{
	
	private enum MyWeapons{
		KNIFE,
		RIFLE,
		BOW;
	}
	public int amount; 
	
	public int getAmount() {
		return amount;
	}
	
	public void setAmount(int amount) {
		this.amount = amount;
	}
}
